txt> `?`(txt)
No documentation for ‘txt’ in specified packages and libraries:
you could try ‘??txt’

 **In the example used in exercise 1, the original data is binary (either 6 or not). In this case, the success probability also affects the appropriateness of the CLT. With very low probabilities, we need larger sample sizes for the CLT to “kick in”.

Run the simulation from exercise 1, but for different values of p and n. For which of the following is the normal approximation best?

A) p=0.5 and n=5
B) p=0.5 and n=30
C) p=0.01 and n=30
D) p=0.01 and n=100
 


 ## would expect lower probability to have lower variance in the data, vice versa. i.e. if p = 0.05, you would have 50/50 TRUE FALSE, but p = 0.05, you would have more TRUE than FALSE (vice versa), hence less variation and central tendency to one of the two. 


 ## a higher n sample size would mean a larger divisble factor in the z score formula, hence a smaller value for SD. this means that a larger n means less variance in the data (silences noise). CLT also 'kicks in' with a larger sample size i.e. achieves closer to a total normal distribution (asymptotic) 


 ##  D seems to be the most likely answer for the least variance, and most normal distribution? 

txt> res <- replicate(10000, {
txt+ x <- sample(1:6, 30, replace = TRUE)
txt+ a <- mean(x == 6)
txt+ z <- (a - 0.01)/sqrt(0.01 * (1 - 0.01)/30)
txt+ })
txt> res
   [1]  4.9543369  6.7892766 10.4591558  8.6242162  6.7892766  4.9543369  8.6242162 12.2940954  6.7892766
  [10]  6.7892766 17.7989142  8.6242162 14.1290350 15.9639746  6.7892766  8.6242162  4.9543369  3.1193973
  [19]  4.9543369  4.9543369  3.1193973 10.4591558 10.4591558  4.9543369  8.6242162  6.7892766 12.2940954
  [28]  8.6242162 10.4591558  6.7892766  8.6242162  6.7892766  8.6242162 15.9639746 15.9639746 12.2940954
  [37]  8.6242162 10.4591558 14.1290350  8.6242162 10.4591558 14.1290350 10.4591558 10.4591558  8.6242162
  [46]  6.7892766  3.1193973  6.7892766  8.6242162  8.6242162  4.9543369  6.7892766  6.7892766 14.1290350
  [55]  1.2844577  4.9543369  8.6242162  6.7892766  4.9543369  3.1193973  4.9543369  6.7892766 10.4591558
  [64] 10.4591558 12.2940954  8.6242162  8.6242162 10.4591558 14.1290350 12.2940954 14.1290350 10.4591558
  [73]  6.7892766 15.9639746  8.6242162  6.7892766 10.4591558 10.4591558 12.2940954  8.6242162  3.1193973
  [82]  6.7892766  8.6242162 10.4591558 10.4591558 14.1290350  4.9543369  6.7892766 14.1290350  6.7892766
  [91]  8.6242162  4.9543369 10.4591558  6.7892766  8.6242162  8.6242162  4.9543369 12.2940954  6.7892766
 [100]  4.9543369  8.6242162  8.6242162 10.4591558  6.7892766  8.6242162  4.9543369 12.2940954 10.4591558
 [109] 10.4591558  8.6242162  8.6242162  3.1193973 14.1290350  1.2844577  1.2844577  6.7892766  3.1193973
 [118]  4.9543369  8.6242162  1.2844577 10.4591558  4.9543369  4.9543369  6.7892766 12.2940954  3.1193973
 [127] 17.7989142  8.6242162  4.9543369  6.7892766  3.1193973 12.2940954 12.2940954  8.6242162 10.4591558
 [136]  3.1193973 10.4591558  6.7892766 12.2940954 14.1290350  8.6242162  3.1193973 17.7989142 12.2940954
 [145]  8.6242162  4.9543369 12.2940954  3.1193973 -0.5504819  8.6242162  6.7892766  4.9543369  8.6242162
 [154] 12.2940954 10.4591558 14.1290350 15.9639746  1.2844577 14.1290350 15.9639746  4.9543369  8.6242162
 [163]  8.6242162  6.7892766 10.4591558  6.7892766  6.7892766  4.9543369  8.6242162  3.1193973 -0.5504819
 [172]  8.6242162  8.6242162  4.9543369 10.4591558 14.1290350  3.1193973 15.9639746  8.6242162  4.9543369
 [181]  6.7892766  6.7892766  4.9543369  6.7892766 12.2940954 14.1290350  3.1193973 10.4591558  6.7892766
 [190] 12.2940954  8.6242162 12.2940954  8.6242162  8.6242162 15.9639746  1.2844577  4.9543369  8.6242162
 [199]  8.6242162  4.9543369 10.4591558 10.4591558  6.7892766 10.4591558  4.9543369  4.9543369 14.1290350
 [208]  8.6242162 10.4591558  4.9543369  3.1193973 12.2940954  6.7892766  3.1193973  8.6242162  8.6242162
 [217] 10.4591558 10.4591558 10.4591558  6.7892766 10.4591558  8.6242162  8.6242162 10.4591558 10.4591558
 [226] 14.1290350  8.6242162  8.6242162  4.9543369 -0.5504819  8.6242162  1.2844577  4.9543369  8.6242162
 [235] 17.7989142  6.7892766  8.6242162  8.6242162 10.4591558 14.1290350  4.9543369  4.9543369  8.6242162
 [244]  3.1193973 10.4591558 10.4591558  8.6242162  8.6242162  6.7892766  3.1193973  8.6242162  6.7892766
 [253] 14.1290350  4.9543369  6.7892766  4.9543369  8.6242162  4.9543369 12.2940954 12.2940954 12.2940954
 [262] 10.4591558 14.1290350  4.9543369 12.2940954  4.9543369  6.7892766  8.6242162  8.6242162  1.2844577
 [271]  8.6242162 14.1290350  6.7892766  4.9543369  3.1193973  3.1193973  6.7892766  6.7892766  8.6242162
 [280] 10.4591558 10.4591558  8.6242162 14.1290350  3.1193973  8.6242162  6.7892766 10.4591558  8.6242162
 [289] 14.1290350 10.4591558 12.2940954 10.4591558  8.6242162 10.4591558 14.1290350  6.7892766  8.6242162
 [298] 12.2940954 12.2940954 -0.5504819 10.4591558  8.6242162  8.6242162  8.6242162 10.4591558 10.4591558
 [307] 15.9639746  8.6242162 12.2940954 12.2940954  3.1193973  3.1193973 10.4591558 10.4591558 10.4591558
 [316]  4.9543369  6.7892766 12.2940954 15.9639746 10.4591558  3.1193973  4.9543369 10.4591558 10.4591558
 [325] 14.1290350 12.2940954  6.7892766 10.4591558 15.9639746 10.4591558  8.6242162  8.6242162  3.1193973
 [334]  1.2844577  6.7892766  6.7892766 10.4591558  8.6242162 12.2940954  6.7892766  6.7892766  6.7892766
 [343]  4.9543369  1.2844577  4.9543369  8.6242162  3.1193973  8.6242162 10.4591558 10.4591558 12.2940954
 [352] 10.4591558  3.1193973  6.7892766 14.1290350  4.9543369  8.6242162 10.4591558  4.9543369  6.7892766
 [361] 10.4591558  6.7892766 14.1290350 10.4591558  8.6242162 10.4591558  6.7892766 12.2940954  8.6242162
 [370]  3.1193973 -0.5504819  6.7892766 12.2940954  6.7892766  6.7892766 12.2940954 14.1290350 12.2940954
 [379]  3.1193973  1.2844577 14.1290350  8.6242162  6.7892766  6.7892766  8.6242162  3.1193973 14.1290350
 [388]  8.6242162  1.2844577 15.9639746  4.9543369  8.6242162  8.6242162 10.4591558  4.9543369  8.6242162
 [397] 10.4591558 12.2940954  3.1193973  8.6242162  8.6242162  6.7892766  4.9543369  8.6242162  4.9543369
 [406]  3.1193973  6.7892766 10.4591558  3.1193973  8.6242162 10.4591558  1.2844577  8.6242162  4.9543369
 [415]  6.7892766 17.7989142  6.7892766  8.6242162 12.2940954 12.2940954 14.1290350  8.6242162  6.7892766
 [424]  6.7892766  3.1193973 10.4591558  6.7892766  8.6242162 17.7989142  8.6242162  3.1193973  4.9543369
 [433] 12.2940954  8.6242162 10.4591558 10.4591558  4.9543369  8.6242162 12.2940954  4.9543369 12.2940954
 [442]  6.7892766 19.6338538  4.9543369  1.2844577 19.6338538 14.1290350 10.4591558 12.2940954 14.1290350
 [451]  6.7892766  6.7892766 10.4591558 14.1290350  6.7892766  8.6242162  4.9543369 10.4591558  4.9543369
 [460]  6.7892766  8.6242162 10.4591558  8.6242162 10.4591558 12.2940954  8.6242162 14.1290350  8.6242162
 [469]  4.9543369 -0.5504819 10.4591558  6.7892766  8.6242162 10.4591558  4.9543369  4.9543369 12.2940954
 [478] 12.2940954  6.7892766  6.7892766 10.4591558  1.2844577 10.4591558 14.1290350  8.6242162 14.1290350
 [487]  3.1193973  6.7892766  6.7892766  4.9543369 14.1290350  6.7892766 10.4591558 10.4591558  8.6242162
 [496]  8.6242162  6.7892766 10.4591558 10.4591558  6.7892766 10.4591558  8.6242162  8.6242162  4.9543369
 [505]  4.9543369  4.9543369  6.7892766  4.9543369  8.6242162  3.1193973  8.6242162  6.7892766 10.4591558
 [514]  6.7892766 12.2940954  6.7892766 15.9639746  4.9543369  6.7892766  4.9543369  4.9543369  8.6242162
 [523]  4.9543369  8.6242162 10.4591558  1.2844577  6.7892766  8.6242162 15.9639746  4.9543369  6.7892766
 [532]  8.6242162  1.2844577  6.7892766  8.6242162  3.1193973 10.4591558 12.2940954  1.2844577  8.6242162
 [541]  4.9543369  6.7892766  3.1193973  6.7892766  6.7892766  8.6242162 12.2940954 15.9639746  8.6242162
 [550]  3.1193973 12.2940954  4.9543369  8.6242162 10.4591558  8.6242162  4.9543369  4.9543369 15.9639746
 [559]  6.7892766  6.7892766 14.1290350 14.1290350 12.2940954  8.6242162  8.6242162  6.7892766 10.4591558
 [568]  6.7892766  1.2844577 12.2940954  6.7892766 17.7989142  6.7892766 12.2940954  8.6242162  4.9543369
 [577]  6.7892766 15.9639746 14.1290350  3.1193973  6.7892766  8.6242162  8.6242162  8.6242162  6.7892766
 [586] 12.2940954 10.4591558  3.1193973  3.1193973  8.6242162  8.6242162  8.6242162  6.7892766  6.7892766
 [595] 10.4591558  4.9543369 10.4591558 21.4687934  4.9543369  1.2844577  6.7892766  4.9543369  6.7892766
 [604]  8.6242162 17.7989142  8.6242162  8.6242162  1.2844577  6.7892766 10.4591558 14.1290350  8.6242162
 [613]  6.7892766 10.4591558 12.2940954  4.9543369 25.1386726  8.6242162  1.2844577  8.6242162 10.4591558
 [622]  6.7892766 15.9639746 15.9639746 10.4591558 12.2940954 14.1290350  4.9543369  4.9543369  3.1193973
 [631]  8.6242162  1.2844577 10.4591558  8.6242162  6.7892766  8.6242162  4.9543369  4.9543369 10.4591558
 [640] 17.7989142  8.6242162  3.1193973 10.4591558  6.7892766  3.1193973  6.7892766  4.9543369  6.7892766
 [649]  8.6242162 10.4591558  4.9543369  6.7892766  6.7892766  8.6242162  4.9543369 14.1290350  4.9543369
 [658]  8.6242162  6.7892766  4.9543369  6.7892766 10.4591558  6.7892766 10.4591558  6.7892766 12.2940954
 [667]  8.6242162  6.7892766 12.2940954 12.2940954  6.7892766 10.4591558  8.6242162 12.2940954  4.9543369
 [676] 10.4591558  4.9543369 12.2940954  6.7892766  4.9543369  3.1193973  8.6242162  4.9543369 10.4591558
 [685] 10.4591558  4.9543369  8.6242162  4.9543369  6.7892766 19.6338538 10.4591558 15.9639746  6.7892766
 [694]  1.2844577  8.6242162 14.1290350 15.9639746 12.2940954  6.7892766  6.7892766 10.4591558 10.4591558
 [703] 10.4591558 10.4591558  6.7892766  8.6242162  4.9543369 15.9639746 15.9639746  6.7892766 12.2940954
 [712]  6.7892766  8.6242162 12.2940954  8.6242162  8.6242162  6.7892766  8.6242162 17.7989142 10.4591558
 [721]  6.7892766 14.1290350 12.2940954  4.9543369  3.1193973  6.7892766 10.4591558 12.2940954  3.1193973
 [730]  8.6242162  4.9543369  6.7892766 14.1290350  1.2844577 15.9639746  4.9543369  8.6242162  3.1193973
 [739]  4.9543369 12.2940954  6.7892766  3.1193973  4.9543369  4.9543369  8.6242162 10.4591558 14.1290350
 [748] 12.2940954  8.6242162  8.6242162 12.2940954  8.6242162 10.4591558  8.6242162  6.7892766 10.4591558
 [757]  6.7892766  8.6242162 12.2940954  8.6242162  6.7892766  4.9543369 15.9639746  6.7892766  8.6242162
 [766]  4.9543369 12.2940954  8.6242162  4.9543369 15.9639746 10.4591558  8.6242162  4.9543369  4.9543369
 [775] 12.2940954  6.7892766 10.4591558  6.7892766  6.7892766  6.7892766 10.4591558  6.7892766  1.2844577
 [784]  6.7892766 14.1290350 12.2940954 10.4591558 10.4591558  1.2844577 10.4591558 10.4591558  8.6242162
 [793] 10.4591558  4.9543369  6.7892766  8.6242162 12.2940954  6.7892766  6.7892766  8.6242162  8.6242162
 [802]  6.7892766 10.4591558  3.1193973  8.6242162  4.9543369  8.6242162  4.9543369  4.9543369 14.1290350
 [811]  4.9543369  3.1193973  8.6242162  4.9543369  8.6242162  3.1193973  8.6242162 14.1290350  8.6242162
 [820] 10.4591558  1.2844577  8.6242162  8.6242162 10.4591558 15.9639746  8.6242162  6.7892766 10.4591558
 [829]  8.6242162  4.9543369 14.1290350 14.1290350  8.6242162 12.2940954  4.9543369 14.1290350  6.7892766
 [838]  8.6242162  4.9543369 10.4591558 12.2940954  3.1193973  6.7892766 12.2940954  3.1193973  6.7892766
 [847] 10.4591558 12.2940954  4.9543369  1.2844577  8.6242162 15.9639746 10.4591558  8.6242162  3.1193973
 [856]  8.6242162 12.2940954 10.4591558  4.9543369  4.9543369  3.1193973 10.4591558 10.4591558 10.4591558
 [865] 14.1290350 12.2940954 14.1290350 12.2940954 14.1290350  6.7892766  8.6242162  4.9543369  8.6242162
 [874] 12.2940954  3.1193973  3.1193973 12.2940954 14.1290350  8.6242162  4.9543369  4.9543369  6.7892766
 [883]  3.1193973  6.7892766 14.1290350  3.1193973  8.6242162  8.6242162 10.4591558  3.1193973  8.6242162
 [892] 15.9639746  8.6242162 14.1290350 10.4591558 12.2940954 12.2940954  6.7892766 -0.5504819  4.9543369
 [901] 12.2940954  6.7892766  4.9543369  4.9543369  4.9543369  4.9543369  8.6242162 14.1290350 12.2940954
 [910]  4.9543369 15.9639746 10.4591558  8.6242162  4.9543369 10.4591558 10.4591558  8.6242162  4.9543369
 [919]  4.9543369  6.7892766  8.6242162 15.9639746  3.1193973 10.4591558 14.1290350  6.7892766  8.6242162
 [928]  6.7892766 15.9639746 14.1290350  8.6242162  6.7892766  1.2844577  6.7892766 14.1290350 14.1290350
 [937] -0.5504819 10.4591558  3.1193973  6.7892766 10.4591558 10.4591558  6.7892766  8.6242162 14.1290350
 [946]  8.6242162 10.4591558  6.7892766  6.7892766 10.4591558  4.9543369  6.7892766 14.1290350  1.2844577
 [955]  6.7892766 10.4591558  6.7892766 10.4591558 12.2940954 10.4591558  8.6242162 10.4591558 12.2940954
 [964]  4.9543369 10.4591558 12.2940954 10.4591558 14.1290350 12.2940954  8.6242162  6.7892766 -0.5504819
 [973] 12.2940954  4.9543369  4.9543369  6.7892766  6.7892766  8.6242162 14.1290350  3.1193973  6.7892766
 [982] 14.1290350  8.6242162 10.4591558 14.1290350  8.6242162 10.4591558 15.9639746 14.1290350  8.6242162
 [991]  4.9543369  1.2844577 10.4591558 10.4591558  3.1193973 12.2940954 10.4591558 10.4591558  8.6242162
[1000] 10.4591558
 [ reached 'max' / getOption("max.print") -- omitted 9000 entries ]
txt> mean(abs(res) > 2)
[1] 0.9682
txt> qqnorm(res)
txt> res2 <- replicate(10000, {
txt+ x <- sample(1:6, 30, replace = TRUE)
txt+ })
txt> res2 <- replicate(1000, {
txt+ a <- mean(x == 6)
txt+ x <- sample(1:6, 5, replace = TRUE)
txt+ })
txt> qqnorm(res2)
txt> qqnorm(res)

 ## res2 (p - 0.5, n = 35) had the longest 'tail' ends, i.e. large quantities of noise and variance. therefore, res1 (p = 0.01, n = 30) had the least deviating 'tail' ends, therefore closer to a normal distribution 


 ** As we have already seen, the CLT also applies to averages of quantitative data. A major difference with binary data, for which we know the variance is p(1−p)
, is that with quantitative data we need to estimate the population standard deviation.

In several previous exercises we have illustrated statistical concepts with the unrealistic situation of having access to the entire population. In practice, we do not have access to entire populations. Instead, we obtain one random sample and need to reach conclusions analyzing that data. dat is an example of a typical simple dataset representing just one sample. We have 12 measurements for each of two populations:

We think of X as a random sample from the population of all mice in the control diet and Y
 as a random sample from the population of all mice in the high fat diet.

Define the parameter μx
 as the average of the control population. We estimate this parameter with the sample average X¯
. What is the sample average? **  

txt> dat
   Diet Bodyweight
1  chow      21.51
2  chow      28.14
3  chow      24.04
4  chow      23.45
5  chow      23.68
6  chow      19.79
7  chow      28.40
8  chow      20.98
9  chow      22.51
10 chow      20.10
11 chow      26.91
12 chow      26.25
13   hf      25.71
14   hf      26.37
15   hf      22.80
16   hf      25.34
17   hf      24.97
18   hf      28.14
19   hf      29.58
20   hf      30.92
21   hf      34.02
22   hf      21.90
23   hf      31.53
24   hf      20.73

 ## dat dataset is only a small dataset of 24 variables. this is considered a sample dataset, and can be represent as X or Y 

txt> X <- filter(dat, Diet == "chow")
txt> Y <- filter(dat, Diet == "hf")
txt> X <- filter(dat, Diet == "chow")
txt> X <- filter(dat, Diet == "chow") %>% select(Bodyweight) %>% unlist()
txt> Y <- filter(dat, Diet == "hf") %>% select(Bodyweight) %>% unlist()

 ## parameters μX is the mean of sample X (control), therefore mean(X) 

txt> mean(X)
[1] 23.81333

 ## correction, we can't calculate μx (lower case x = entire population) because we don't have the entire dataset of the population, we only have the sample (dat). we calculated μX above i.e. the average of the control population sample as μX instead of estimate what μx could be 


 ** We don’t know μX
 , but want to use X¯
 to understand μX
. Which of the following uses CLT to understand how well X¯
 approximates μX
 ?
A) X¯
 follows a normal distribution with mean 0 and standard deviation 1.
B) μX
 follows a normal distribution with mean X¯
 and standard deviation σx12√
 where σx
 is the population standard deviation.
C) X¯
 follows a normal distribution with mean μX
 and standard deviation σx
 where σx
 is the population standard deviation.
D) X¯
 follows a normal distribution with mean μX
 and standard deviation σx12√
 where σx
 is the population standard deviation.
** 


 ## ans D: X bar (sample mean) will follow a normal distribution with mean μX and SD defined by sqrt(p*(1-p)/n). It's not B because X bar is a random variable, i.e. not fixed, therefore it makes more sense for X bar to follow a more 'stable' or fixed variable such as the mean of the entire dataset (μX) rather than the other way around. 


 ** The result above tells us the distribution of the following random variable: Z=12‾‾‾√X¯−μXσX
. What does the CLT tell us is the mean of Z
 (you don’t need code)? ** 


 ## with z-score, mean = 0 and sd = 1 

txt> p <- popsd(X)
txt> p
[1] 2.893862
txt> p/sqrt(12)
[1] 0.8353861

 ## dividng popsd / sqrt(n) gives the standard error. the sd (in popsd) is used to see how individual data points vary around the mean, however standard error is used to calculate how sample averages vary around the mean. this would mean taking a small sample size from the bodyweight values of mice > take an average > repeat several times > plot on graph > then use standard error = popsd / sqrt(n) to calculate how far away the sample averages are from the mean  


 **The result of 4 and 5 tell us that we know the distribution of the difference between our estimate and what we want to estimate, but don’t know. However, the equation involves the population standard deviation σX
, which we don’t know. Given what we discussed, what is your estimate of sigmaX? 


 ## sigmaX is the (population) standard deviation. we don't know popsd because we don't have the entire population data, just a sample of 12 mice. therefore, we need to estimate popsd with sd(). this still returns a value with units sigmaX (popsd), but it introduces a lot more uncertainty (bc the SD formula has n-1(?)) to take into account the estimated variability. 


 ## we can't use CLT to estimate because CLT requires that we know popsd (which is very uncommon to have). t-test uses sd() instead because it adapts to only sample datasets, and therefore produces a p-value that also takes into account the uncertainty 


 ## popsd is the true spread of data (but we don't have the entire population data)/ standard error = popsd / sqrt(n). standard error is how far away the sample averages vary away from each other. standard error is also used synonymously with standard deviation? 


 ## that is why in the question it says 'However, the equation involves the population standard deviation σX, which we don’t know.', i.e. you can't calculate CLT without popsd. 


 ## therefore: use popsd() when you have the entire population dataset, but use sd() when you only have the sample dataset. sd() introduces more uncertainty to make an estimation of the true spread in popsd. sd() is also adopted in t-tests when investigating the significance of sample mean values 


 ** Use the CLT to approximate the probability that our estimate X¯
 is off by more than 5.21 ounces from μX ** 


 ## we already established that we cannot use CLT as we do not have popsd(). however, if we choose to use an estimate of popsd() with sd(), we can substitute sd() into the CLT equation. 


 ## the numerator in the z score formula is the 5.21 ounces from the popualtion mean. the numerator is the (sample mean (Xbar) - expected (population) mean). however, we don't know the population mean. so hypothetically, the q is asking what is the probability that the sample mean will be 5.21 ounces from the true mean? i.e. the q has assumed 


 ## therefore, 5.21 acts as the numerator 


 ## standard error sqrt(p(1-p)/n is used for binary data (rolling dice), but for quantitative data we use sd / sqrt(n) (where sd is the sigmaX) 


 ## therefore the updated z score formula is the sample and expected means, divided by the standard error. standard error is sd / sqrt(n), therefore the final z formula = 5.21 / (sd / sqrt(n)) 

txt> 5.21/(sd(X)/sqrt(12))
[1] 5.971126
txt> txtStop
function() {
  removeTaskCallback('r2txt')
  if( R2txt.vars$closecon ) {
    close( R2txt.vars$con )
  }
  if( R2txt.vars$cmdfile && R2txt.vars$closecon2 ) {
    close( R2txt.vars$con2 )
  }
  options( prompt=R2txt.vars$prompt,
           continue=R2txt.vars$continue )
  if(R2txt.vars$res) {
      sink()
      close(R2txt.vars$outcon)
  }
  evalq( rm(list=ls()), envir=R2txt.vars )
  invisible(NULL)
}
<bytecode: 0x7fac73c8f6d0>
<environment: namespace:TeachingDemos>
